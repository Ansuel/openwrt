name: Build Kernel on macos

on:
  push:
    branches-ignore:
      - master

jobs:
  determine_targets:
    name: Set targets
    runs-on: ubuntu-latest
    outputs:
      targets_subtargets: ${{ steps.find_targets.outputs.targets_subtargets }}
      targets: ${{ steps.find_targets.outputs.targets }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35

      - name: Set targets
        id: find_targets
        run: |
          ALL_TARGETS="$(perl ./scripts/dump-target-info.pl targets 2>/dev/null)"
          CHANGED_FILES="$(echo ${{ steps.changed-files.outputs.all_changed_files }} | tr ' ' '\n')"

          TARGETS_SUBTARGETS="$(echo "$ALL_TARGETS" | sort -u -t '/' -k1 | awk '{ print $1 }')"
          TARGETS="$(echo "$ALL_TARGETS" | sort -u -t '/' -k1,1 | awk '{ print $1 }')"

          # On testing non-specific target, skip testing each subtarget if we are testing pr
          if [ ${{ github.event_name }} != 'push' ]; then
            if echo "$CHANGED_FILES" | grep -v -q target/linux ||
              echo "$CHANGED_FILES" | grep -q target/linux/generic; then
              TARGETS_SUBTARGETS=$TARGETS
            fi
          fi

          JSON_TARGETS_SUBTARGETS='['
          FIRST=1
          for TARGET in $TARGETS_SUBTARGETS; do
            if echo "$CHANGED_FILES" | grep -v -q target/linux ||
              echo "$CHANGED_FILES" | grep -q target/linux/generic ||
              echo "$CHANGED_FILES" | grep -q $(echo $TARGET | cut -d "/" -f 1); then
              TUPLE='{"target":"'"$(echo $TARGET | cut -d "/" -f 1)"'","subtarget":"'"$(echo $TARGET | cut -d "/" -f 2)"'"}'
              [[ $FIRST -ne 1 ]] && JSON_TARGETS_SUBTARGETS="$JSON_TARGETS_SUBTARGETS"','
              JSON_TARGETS_SUBTARGETS="$JSON_TARGETS_SUBTARGETS""$TUPLE"
              FIRST=0
            fi
          done
          JSON_TARGETS_SUBTARGETS="$JSON_TARGETS_SUBTARGETS"']'

          JSON_TARGETS='['
          FIRST=1
          for TARGET in $TARGETS; do
            if echo "$CHANGED_FILES" | grep -v -q target/linux ||
              echo "$CHANGED_FILES" | grep -q target/linux/generic ||
              echo "$CHANGED_FILES" | grep -q $(echo $TARGET | cut -d "/" -f 1); then
              TUPLE='{"target":"'"$(echo $TARGET | cut -d "/" -f 1)"'","subtarget":"'"$(echo $TARGET | cut -d "/" -f 2)"'"}'
              [[ $FIRST -ne 1 ]] && JSON_TARGETS="$JSON_TARGETS"','
              JSON_TARGETS="$JSON_TARGETS""$TUPLE"
              FIRST=0
            fi
          done
          JSON_TARGETS="$JSON_TARGETS"']'

          echo -e "\n---- targets to build ----\n"
          echo "$JSON_TARGETS_SUBTARGETS"
          echo -e "\n---- targets to build ----\n"

          echo -e "\n---- targets to check patch ----\n"
          echo "$JSON_TARGETS"
          echo -e "\n---- targets to check patch ----\n"

          echo "targets_subtargets=$JSON_TARGETS_SUBTARGETS" >> $GITHUB_OUTPUT
          echo "targets=$JSON_TARGETS" >> $GITHUB_OUTPUT

  build:
    name: Build Kernel with external toolchain
    needs: determine_targets
    permissions:
      contents: read
      packages: read
      actions: write
    strategy:
       fail-fast: False
       matrix:
         include: "${{fromJson(needs.determine_targets.outputs.targets_subtargets)}}"
    uses: ./.github/workflows/test-macos2.yml
    with:
      container_name: toolchain
      target: ${{ matrix.target }}
      subtarget: ${{ matrix.subtarget }}
      build_kernel: true
      build_all_kmods: true
      upload_ccache_cache: ${{ github.repository_owner == 'openwrt' }}

  build2:
    name: Build armsr/armv8
    runs-on: ubuntu-latest
    needs: build

    steps:
      # - name: Determine base branch tag
      #   id: determine_base_branch
      #   run: |
      #     BASE_BRANCH=openwrt-23.05
      #     # if [ -n "${{ github.base_ref }}" ]; then
      #     #   if echo "${{ github.base_ref }}" | grep -q -E '^openwrt-[0-9][0-9]\.[0-9][0-9]$'; then
      #     #     BASE_BRANCH="${{ github.base_ref }}"
      #     #   fi
      #     # elif [ ${{ github.ref_type }} == "branch" ]; then
      #     #   if echo "${{ github.ref_name }}" | grep -q -E '^openwrt-[0-9][0-9]\.[0-9][0-9]$'; then
      #     #     CONTAINER_TAG=${{ github.ref_name }}
      #     #   elif echo "${{ github.ref_name }}" | grep -q -E '^openwrt-[0-9][0-9]\.[0-9][0-9]-'; then
      #     #     BASE_BRANCH="$(echo ${{ github.ref_name }} | sed 's/^\(openwrt-[0-9][0-9]\.[0-9][0-9]\)-.*/\1/')"
      #     #   fi
      #     # elif [ ${{ github.ref_type }} == "tag" ]; then
      #     #   if echo "${{ github.ref_name }}" | grep -q -E '^v[0-9][0-9]\.[0-9][0-9]\..+'; then
      #     #     BASE_BRANCH=openwrt-"$(echo ${{ github.ref_name }} | sed 's/^v\([0-9][0-9]\.[0-9][0-9]\)\..\+/\1/')"
      #     #   fi
      #     # fi

      #     echo "Detected base branch as $BASE_BRANCH"
      #     echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPU

      - name: aaa
        # env:
        #   TEST: ${{ steps.determine_base_branch.outputs.base_branch != 'main' &&
        #     steps.determine_base_branch.outputs.base_branch || '' }}
        shell: sh
        run: |
          echo ${{ needs.build.outputs.ccache_tag }}
      # - name: Checkout master directory
      #   uses: actions/checkout@v3
      #   with:
      #     path: openwrt

      # - name: Upload bho
      #   uses: actions/upload-artifact@v4-beta
      #   with:
      #     name: armsr-armv8-logs
      #     path: openwrt

      # - name: Checkout packages feed
      #   uses: actions/checkout@v3
      #   with:
      #     repository: openwrt/packages
      #     path: ${{ env.WORKPATH }}/openwrt/feeds/packages

      # - name: Checkout luci feed
      #   uses: actions/checkout@v3
      #   with:
      #     repository: openwrt/luci
      #     path: ${{ env.WORKPATH }}/openwrt/feeds/luci

      # - name: Checkout routing feed
      #   uses: actions/checkout@v3
      #   with:
      #     repository: openwrt/routing
      #     path: ${{ env.WORKPATH }}/openwrt/feeds/routing

      # - name: Checkout telephony feed
      #   uses: actions/checkout@v3
      #   with:
      #     repository: openwrt/telephony
      #     path: ${{ env.WORKPATH }}/openwrt/feeds/telephony

      # - name: Setup MacOS
      #   run: |
      #     echo "WORKPATH=/Volumes/OpenWrt" >> "$GITHUB_ENV"
      #     hdiutil create -size 20g -type SPARSE -fs "Case-sensitive HFS+" -volname OpenWrt OpenWrt.sparseimage
      #     hdiutil attach OpenWrt.sparseimage
      #     mv "$GITHUB_WORKSPACE/openwrt" /Volumes/OpenWrt/

      # - name: Install required prereq on MacOS
      #   working-directory: ${{ env.WORKPATH }}/openwrt
      #   run: |
      #     brew install \
      #       automake \
      #       coreutils \
      #       diffutils \
      #       findutils \
      #       gawk \
      #       git-extras \
      #       gnu-getopt \
      #       gnu-sed \
      #       grep \
      #       make

      #       echo "/bin" >> "$GITHUB_PATH"
      #       echo "/sbin/Library/Apple/usr/bin" >> "$GITHUB_PATH"
      #       echo "/usr/bin" >> "$GITHUB_PATH"
      #       echo "/usr/local/bin" >> "$GITHUB_PATH"
      #       echo "/usr/local/opt/coreutils/bin" >> "$GITHUB_PATH"
      #       echo "/usr/local/opt/findutils/libexec/gnubin" >> "$GITHUB_PATH"
      #       echo "/usr/local/opt/gettext/bin" >> "$GITHUB_PATH"
      #       echo "/usr/local/opt/gnu-getopt/bin" >> "$GITHUB_PATH"
      #       echo "/usr/local/opt/make/libexec/gnubin" >> "$GITHUB_PATH"
      #       echo "/usr/local/opt/make/libexec/gnubin" >> "$GITHUB_PATH"
      #       echo "/usr/sbin" >> "$GITHUB_PATH"

      # # - name: Update & Install feeds
      # #   working-directory: ${{ env.WORKPATH }}/openwrt
      # #   run: |
      # #     ./scripts/feeds update -a
      # #     ./scripts/feeds install -a

      # # - name: Clean configuration
      # #   working-directory: ${{ env.WORKPATH }}/openwrt
      # #   run: |
      # #     rm -rf .config

      # # - name: Configure KERNEL_WERROR
      # #   working-directory: ${{ env.WORKPATH }}/openwrt
      # #   run: |
      # #     echo CONFIG_KERNEL_WERROR=y >> .config

      # # - name: Configure all kernel modules
      # #   working-directory: ${{ env.WORKPATH }}/openwrt
      # #   run: |
      # #     echo CONFIG_ALL_KMODS=y >> .config

      # # - name: Configure all modules
      # #   working-directory: ${{ env.WORKPATH }}/openwrt
      # #   run: |
      # #     echo CONFIG_ALL=y >> .config

      # # - name: Configure all boards
      # #   working-directory: ${{ env.WORKPATH }}/openwrt
      # #   run: |
      # #     echo CONFIG_TARGET_MULTI_PROFILE=y >> .config
      # #     echo CONFIG_TARGET_PER_DEVICE_ROOTFS=y >> .config
      # #     echo CONFIG_TARGET_ALL_PROFILES=y >> .config

      # - name: Configure internal toolchain
      #   working-directory: ${{ env.WORKPATH }}/openwrt
      #   run: |

      #     echo "CONFIG_TARGET_armsr=y" >> .config
      #     echo "CONFIG_TARGET_armsr_armv8=y" >> .config

      #     make defconfig

      # - name: Show configuration
      #   working-directory: ${{ env.WORKPATH }}/openwrt
      #   run: ./scripts/diffconfig.sh

      # - name: Build tools
      #   working-directory: ${{ env.WORKPATH }}/openwrt
      #   run: make tools/install -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

      # - name: Build toolchain
      #   working-directory: ${{ env.WORKPATH }}/openwrt
      #   run: make toolchain/install -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

      # - name: Build Kernel
      #   working-directory: ${{ env.WORKPATH }}/openwrt
      #   run: make target/compile -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

      # - name: Build Kernel Kmods
      #   working-directory: ${{ env.WORKPATH }}/openwrt
      #   run: make package/linux/compile -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

      # - name: Build everything
      #   working-directory: ${{ env.WORKPATH }}/openwrt
      #   run: make -j$(nproc) BUILD_LOG=1 || ret=$? .github/workflows/scripts/show_build_failures.sh

      # - name: Upload logs
      #   if: failure()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: armsr-armv8-logs
      #     path: ${{ env.WORKPATH }}/openwrt/logs
