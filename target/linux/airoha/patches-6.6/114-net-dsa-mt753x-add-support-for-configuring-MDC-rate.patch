From 76b663017418f2835886ebb6629204d2e3a9c41a Mon Sep 17 00:00:00 2001
From: Christian Marangi <ansuelsmth@gmail.com>
Date: Mon, 27 Jan 2025 17:23:22 +0100
Subject: [PATCH] net: dsa: mt753x: add support for configuring MDC rate

Add support for configuring MDC rate on MT753x DSA Switch.

This is commonly supported on the MT7531 DSA Switch and is used to run
the MDC clock at a different devider to make the MDIO operation faster.

The switch have a BUS clock and apply a divider on it to configure the
MDC clock for correct PHY operation but modern PHY supports faster speed
than 802.3 spec of 2.5MHz. Configuring higher speed is especially useful
for PHY that require to load a Firmware with the MDIO lines.

With this patch we add support for the EN7581 DSA Switch that is based
on the MT7531 register map but place the MDC clock divider in the
PHY_POLL registers and also have a different MASK and devider
configuration. On MT7531, MDC clock configuration is placed on a dedicated
register and have a different MASK and devider settings.

EN7581 supports only 4 divider: x256, x64, x32 and x16. And the MDC
internal base clock is 500MHz.

Signed-off-by: Christian Marangi <ansuelsmth@gmail.com>
---
 drivers/net/dsa/mt7530.c | 34 ++++++++++++++++++++++++++++++++++
 drivers/net/dsa/mt7530.h | 18 ++++++++++++++++++
 2 files changed, 52 insertions(+)

diff --git a/drivers/net/dsa/mt7530.c b/drivers/net/dsa/mt7530.c
index d2d0f091e49e..5fa57bbc3ec1 100644
--- a/drivers/net/dsa/mt7530.c
+++ b/drivers/net/dsa/mt7530.c
@@ -2273,6 +2273,36 @@ mt7530_free_irq(struct mt7530_priv *priv)
 	mt7530_free_irq_common(priv);
 }
 
+static void
+en7581_select_mdc_rate(struct mt7530_priv *priv,
+		       struct device_node *np)
+{
+	u32 possible_divs[] = { 256, 64, 32, 16 };
+	u32 req_rate;
+	int div;
+
+	/* Default to 1.9Mhz if not set.
+	 * This is the closest rate that can reach 2.5Mhz
+	 * following 802.3 spec. The next step is x64 with 7.9Mhz.
+	 */
+	if (of_property_read_u32(np, "clock-frequency", &req_rate))
+		req_rate = 1900000;
+
+	/* Search the closest rate with possible divider */
+	for (div = 0; div < ARRAY_SIZE(possible_divs); div++) {
+		u32 rate;
+
+		rate = DIV_ROUND_UP(EN7581_MDC_BASE_FREQ_HZ,
+				    possible_divs[div]);
+		if (rate > req_rate)
+			break;
+	}
+
+	/* Set to the closest rate requested */
+	mt7530_rmw(priv, MT7531_PHY_POLL, EN7581_PMDC_CFG_MASK,
+		   FIELD_PREP(EN7581_PMDC_CFG_MASK, div));
+}
+
 static int
 mt7530_setup_mdio(struct mt7530_priv *priv)
 {
@@ -2297,6 +2327,9 @@ mt7530_setup_mdio(struct mt7530_priv *priv)
 	if (!mnp)
 		ds->user_mii_bus = bus;
 
+	if (priv->info->select_mdc_rate)
+		priv->info->select_mdc_rate(priv, mnp);
+
 	bus->priv = priv;
 	bus->name = KBUILD_MODNAME "-mii";
 	snprintf(bus->id, MII_BUS_ID_SIZE, KBUILD_MODNAME "-%d", idx++);
@@ -3288,6 +3321,7 @@ const struct mt753x_info mt753x_table[] = {
 		.id = ID_EN7581,
 		.pcs_ops = &mt7530_pcs_ops,
 		.sw_setup = mt7988_setup,
+		.select_mdc_rate = en7581_select_mdc_rate,
 		.phy_read_c22 = mt7531_ind_c22_phy_read,
 		.phy_write_c22 = mt7531_ind_c22_phy_write,
 		.phy_read_c45 = mt7531_ind_c45_phy_read,
diff --git a/drivers/net/dsa/mt7530.h b/drivers/net/dsa/mt7530.h
index 448200689f49..a12c7d90aa25 100644
--- a/drivers/net/dsa/mt7530.h
+++ b/drivers/net/dsa/mt7530.h
@@ -11,6 +11,9 @@
 #define MT7530_NUM_FDB_RECORDS		2048
 #define MT7530_ALL_MEMBERS		0xff
 
+/* EN7581 MDC base frequency is at 500Mhz */
+#define EN7581_MDC_BASE_FREQ_HZ		500000000
+
 #define MTK_HDR_LEN	4
 #define MT7530_MAX_MTU	(15 * 1024 - ETH_HLEN - ETH_FCS_LEN - MTK_HDR_LEN)
 
@@ -455,6 +458,18 @@ enum mt7530_vlan_port_acc_frm {
 /* Register for system interrupt status */
 #define MT7530_SYS_INT_STS		0x700c
 
+/* Register for PHY Polling and SMI Master Control */
+#define MT7531_PHY_POLL			0x7018
+/* MT7531 have a dedicated register to set MDC clock
+ * divider but EN7581 put this in PHY_POLL. Also the
+ * mask and bit values is different.
+ */
+#define  EN7581_PMDC_CFG_MASK		GENMASK(7, 6)
+#define  EN7581_PMDC_CFG_256		FIELD_PREP_CONST(MT7531_PMDC_CFG_MASK, 0x0)
+#define  EN7581_PMDC_CFG_64		FIELD_PREP_CONST(MT7531_PMDC_CFG_MASK, 0x1)
+#define  EN7581_PMDC_CFG_32		FIELD_PREP_CONST(MT7531_PMDC_CFG_MASK, 0x2)
+#define  EN7581_PMDC_CFG_16		FIELD_PREP_CONST(MT7531_PMDC_CFG_MASK, 0x3)
+
 /* Register for PHY Indirect Access Control */
 #define MT7531_PHY_IAC			0x701C
 #define  MT7531_PHY_ACS_ST		BIT(31)
@@ -769,6 +784,7 @@ struct mt753x_pcs {
  * @id:			Holding the identifier to a switch model
  * @pcs_ops:		Holding the pointer to the MAC PCS operations structure
  * @sw_setup:		Holding the handler to a device initialization
+ * @select_mdc_rate:	Holding the handler to MDC rate initialization
  * @phy_read_c22:	Holding the way reading PHY port using C22
  * @phy_write_c22:	Holding the way writing PHY port using C22
  * @phy_read_c45:	Holding the way reading PHY port using C45
@@ -783,6 +799,8 @@ struct mt753x_info {
 	const struct phylink_pcs_ops *pcs_ops;
 
 	int (*sw_setup)(struct dsa_switch *ds);
+	void (*select_mdc_rate)(struct mt7530_priv *priv,
+			        struct device_node *np);
 	int (*phy_read_c22)(struct mt7530_priv *priv, int port, int regnum);
 	int (*phy_write_c22)(struct mt7530_priv *priv, int port, int regnum,
 			     u16 val);
-- 
2.47.1

