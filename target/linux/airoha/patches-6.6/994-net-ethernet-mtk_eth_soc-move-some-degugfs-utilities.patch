From 00f227a9f2755f8eda6112f8abe35a72c151abe4 Mon Sep 17 00:00:00 2001
Message-ID: <00f227a9f2755f8eda6112f8abe35a72c151abe4.1737803595.git.lorenzo@kernel.org>
In-Reply-To: <1e82f12b417fa132b7338df50ddd5499bcbd3f26.1737803595.git.lorenzo@kernel.org>
References: <1e82f12b417fa132b7338df50ddd5499bcbd3f26.1737803595.git.lorenzo@kernel.org>
From: Lorenzo Bianconi <lorenzo@kernel.org>
Date: Tue, 31 Dec 2024 19:27:59 +0100
Subject: [PATCH net-next 8/9] net: ethernet: mtk_eth_soc: move some degugfs
 utilities in mtk_ppe.h

This is a preliminary patch to add debugfs support for netfilter flowtable
hw offloading on EN7581 SoC.

Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
---
 drivers/net/ethernet/mediatek/mtk_ppe.h       | 67 +++++++++++++++++++
 .../net/ethernet/mediatek/mtk_ppe_debugfs.c   | 67 -------------------
 2 files changed, 67 insertions(+), 67 deletions(-)

--- a/drivers/net/ethernet/mediatek/mtk_ppe.h
+++ b/drivers/net/ethernet/mediatek/mtk_ppe.h
@@ -7,6 +7,7 @@
 #include <linux/kernel.h>
 #include <linux/bitfield.h>
 #include <linux/rhashtable.h>
+#include <net/ipv6.h>
 
 #define MTK_PPE_ENTRIES_SHIFT		4
 #define MTK_PPE_ENTRIES			(1024 << MTK_PPE_ENTRIES_SHIFT)
@@ -339,6 +340,13 @@ struct mtk_flow_data {
 	} pppoe;
 };
 
+struct mtk_flow_addr_info
+{
+	void *src, *dest;
+	u16 *src_port, *dest_port;
+	bool ipv6;
+};
+
 struct mtk_mib_entry {
 	u32	byt_cnt_l;
 	u16	byt_cnt_h;
@@ -405,6 +413,65 @@ mtk_ppe_check_skb(struct mtk_ppe *ppe, s
 	__mtk_ppe_check_skb(ppe, skb, hash);
 }
 
+static inline const char *mtk_foe_entry_state_str(int state)
+{
+	static const char * const state_str[] = {
+		[MTK_FOE_STATE_INVALID] = "INV",
+		[MTK_FOE_STATE_UNBIND] = "UNB",
+		[MTK_FOE_STATE_BIND] = "BND",
+		[MTK_FOE_STATE_FIN] = "FIN",
+	};
+
+	if (state >= ARRAY_SIZE(state_str) || !state_str[state])
+		return "UNK";
+
+	return state_str[state];
+}
+
+static inline const char *mtk_foe_pkt_type_str(int type)
+{
+	static const char * const type_str[] = {
+		[MTK_PPE_PKT_TYPE_IPV4_HNAPT] = "IPv4 5T",
+		[MTK_PPE_PKT_TYPE_IPV4_ROUTE] = "IPv4 3T",
+		[MTK_PPE_PKT_TYPE_IPV4_DSLITE] = "DS-LITE",
+		[MTK_PPE_PKT_TYPE_IPV6_ROUTE_3T] = "IPv6 3T",
+		[MTK_PPE_PKT_TYPE_IPV6_ROUTE_5T] = "IPv6 5T",
+		[MTK_PPE_PKT_TYPE_IPV6_6RD] = "6RD",
+	};
+
+	if (type >= ARRAY_SIZE(type_str) || !type_str[type])
+		return "UNKNOWN";
+
+	return type_str[type];
+}
+
+static inline void
+mtk_print_addr(struct seq_file *m, u32 *addr, bool ipv6)
+{
+	__be32 n_addr[4];
+
+	if (!ipv6) {
+		seq_printf(m, "%pI4h", addr);
+		return;
+	}
+
+	cpu_to_be32_array(n_addr, addr, 4);
+	seq_printf(m, "%pI6", n_addr);
+}
+
+static inline void
+mtk_print_addr_info(struct seq_file *m, struct mtk_flow_addr_info *ai)
+{
+	mtk_print_addr(m, ai->src, ai->ipv6);
+	if (ai->src_port)
+		seq_printf(m, ":%d", *ai->src_port);
+	seq_printf(m, "->");
+	mtk_print_addr(m, ai->dest, ai->ipv6);
+	if (ai->dest_port)
+		seq_printf(m, ":%d", *ai->dest_port);
+}
+
+
 int mtk_foe_entry_prepare(struct mtk_eth *eth, struct mtk_foe_entry *entry,
 			  int type, int l4proto, u8 pse_port, u8 *src_mac,
 			  u8 *dest_mac);
--- a/drivers/net/ethernet/mediatek/mtk_ppe_debugfs.c
+++ b/drivers/net/ethernet/mediatek/mtk_ppe_debugfs.c
@@ -5,73 +5,6 @@
 #include <linux/debugfs.h>
 #include "mtk_eth_soc.h"
 
-struct mtk_flow_addr_info
-{
-	void *src, *dest;
-	u16 *src_port, *dest_port;
-	bool ipv6;
-};
-
-static const char *mtk_foe_entry_state_str(int state)
-{
-	static const char * const state_str[] = {
-		[MTK_FOE_STATE_INVALID] = "INV",
-		[MTK_FOE_STATE_UNBIND] = "UNB",
-		[MTK_FOE_STATE_BIND] = "BND",
-		[MTK_FOE_STATE_FIN] = "FIN",
-	};
-
-	if (state >= ARRAY_SIZE(state_str) || !state_str[state])
-		return "UNK";
-
-	return state_str[state];
-}
-
-static const char *mtk_foe_pkt_type_str(int type)
-{
-	static const char * const type_str[] = {
-		[MTK_PPE_PKT_TYPE_IPV4_HNAPT] = "IPv4 5T",
-		[MTK_PPE_PKT_TYPE_IPV4_ROUTE] = "IPv4 3T",
-		[MTK_PPE_PKT_TYPE_IPV4_DSLITE] = "DS-LITE",
-		[MTK_PPE_PKT_TYPE_IPV6_ROUTE_3T] = "IPv6 3T",
-		[MTK_PPE_PKT_TYPE_IPV6_ROUTE_5T] = "IPv6 5T",
-		[MTK_PPE_PKT_TYPE_IPV6_6RD] = "6RD",
-	};
-
-	if (type >= ARRAY_SIZE(type_str) || !type_str[type])
-		return "UNKNOWN";
-
-	return type_str[type];
-}
-
-static void
-mtk_print_addr(struct seq_file *m, u32 *addr, bool ipv6)
-{
-	__be32 n_addr[4];
-	int i;
-
-	if (!ipv6) {
-		seq_printf(m, "%pI4h", addr);
-		return;
-	}
-
-	for (i = 0; i < ARRAY_SIZE(n_addr); i++)
-		n_addr[i] = htonl(addr[i]);
-	seq_printf(m, "%pI6", n_addr);
-}
-
-static void
-mtk_print_addr_info(struct seq_file *m, struct mtk_flow_addr_info *ai)
-{
-	mtk_print_addr(m, ai->src, ai->ipv6);
-	if (ai->src_port)
-		seq_printf(m, ":%d", *ai->src_port);
-	seq_printf(m, "->");
-	mtk_print_addr(m, ai->dest, ai->ipv6);
-	if (ai->dest_port)
-		seq_printf(m, ":%d", *ai->dest_port);
-}
-
 static int
 mtk_ppe_debugfs_foe_show(struct seq_file *m, void *private, bool bind)
 {
