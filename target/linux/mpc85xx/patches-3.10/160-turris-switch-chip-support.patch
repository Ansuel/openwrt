--- a/drivers/net/phy/ar8216.c
+++ b/drivers/net/phy/ar8216.c 
@@ -53,7 +53,8 @@
 	AR8XXX_VER_AR8216 = 0x01,
 	AR8XXX_VER_AR8236 = 0x03,
 	AR8XXX_VER_AR8316 = 0x10,
-	AR8XXX_VER_AR8327 = 0x12,
+	AR8XXX_VER_AR8327_V1 = 0x12,
+	AR8XXX_VER_AR8327_V2 = 0x13,
 };
 
 struct ar8xxx_mib_desc {
@@ -257,7 +258,12 @@
 
 static inline bool chip_is_ar8327(struct ar8xxx_priv *priv)
 {
-	return priv->chip_ver == AR8XXX_VER_AR8327;
+	if(priv->chip_ver == AR8XXX_VER_AR8327_V1)
+		return true;
+	if(priv->chip_ver == AR8XXX_VER_AR8327_V2)
+                return true;
+
+	return false;
 }
 
 static inline void
@@ -2069,6 +2075,7 @@
 	u32 val;
 	u16 id;
 	int i;
+	printk(KERN_ERR "ar8216: Identifying chip.\n");
 
 	val = priv->read(priv, AR8216_REG_CTRL);
 	if (val == ~0)
@@ -2100,7 +2107,11 @@
 	case AR8XXX_VER_AR8316:
 		priv->chip = &ar8316_chip;
 		break;
-	case AR8XXX_VER_AR8327:
+        case AR8XXX_VER_AR8327_V1:
+                priv->mii_lo_first = true;
+                priv->chip = &ar8327_chip;
+                break;
+	case AR8XXX_VER_AR8327_V2:
 		priv->mii_lo_first = true;
 		priv->chip = &ar8327_chip;
 		break;
@@ -2286,6 +2297,8 @@
 	struct net_device *dev = phydev->attached_dev;
 	int ret;
 
+	printk(KERN_ERR "ar8216: Module config init.\n");
+
 	if (WARN_ON(!priv))
 		return -ENODEV;
 
@@ -2329,6 +2342,7 @@
 	struct switch_port_link link;
 	int ret;
 
+	//TRprintk(KERN_ERR "ar8216: read status.\n");
 	if (phydev->addr != 0)
 		return genphy_read_status(phydev);
 
@@ -2367,6 +2381,7 @@
 static int
 ar8xxx_phy_config_aneg(struct phy_device *phydev)
 {
+	printk(KERN_ERR "ar8216: config aneg.\n");
 	if (phydev->addr == 0)
 		return 0;
 
@@ -2376,6 +2391,7 @@
 static const u32 ar8xxx_phy_ids[] = {
 	0x004dd033,
 	0x004dd034,
+	0x004dd036,
 	0x004dd041,
 	0x004dd042,
 };
@@ -2385,9 +2401,11 @@
 {
 	int i;
 
-	for (i = 0; i < ARRAY_SIZE(ar8xxx_phy_ids); i++)
+	for (i = 0; i < ARRAY_SIZE(ar8xxx_phy_ids); i++) {
+		printk(KERN_CRIT "phy_id: %x, ar8xxx_phy_ids[i]: %x\n", phy_id, ar8xxx_phy_ids[i]);
 		if (phy_id == ar8xxx_phy_ids[i])
 			return true;
+	}
 
 	return false;
 }
@@ -2403,6 +2421,8 @@
 		phy_id = mdiobus_read(bus, i, MII_PHYSID1) << 16;
 		phy_id |= mdiobus_read(bus, i, MII_PHYSID2);
 		if (!ar8xxx_phy_match(phy_id)) {
+			printk(KERN_CRIT "ar8xxx: unknown PHY at %s:%02x id:%08x\n",
+				 dev_name(&bus->dev), i, phy_id);
 			pr_debug("ar8xxx: unknown PHY at %s:%02x id:%08x\n",
 				 dev_name(&bus->dev), i, phy_id);
 			return false;
@@ -2419,6 +2439,7 @@
 	struct switch_dev *swdev;
 	int ret;
 
+	printk(KERN_ERR "ar8216: probe addr %x.\n", phydev->addr);
 	/* skip PHYs at unused adresses */
 	if (phydev->addr != 0 && phydev->addr != 4)
 		return -ENODEV;
@@ -2426,11 +2447,13 @@
 	if (!ar8xxx_is_possible(phydev->bus))
 		return -ENODEV;
 
+	printk(KERN_ERR "ar8216: gonna list.\n");
 	mutex_lock(&ar8xxx_dev_list_lock);
 	list_for_each_entry(priv, &ar8xxx_dev_list, list)
 		if (priv->mii_bus == phydev->bus)
 			goto found;
 
+	printk(KERN_ERR "ar8216: after list.\n");
 	priv = ar8xxx_create_mii(phydev->bus);
 	if (priv == NULL) {
 		ret = -ENOMEM;
@@ -2452,6 +2475,7 @@
 		dev_name(&priv->mii_bus->dev));
 
 found:
+	printk(KERN_ERR "ar8216: FOUND!!!.\n");
 	priv->use_count++;
 
 	if (phydev->addr == 0) {
@@ -2550,12 +2574,15 @@
 int __init
 ar8xxx_init(void)
 {
+	printk(KERN_ERR "ar8216: Module init.\n");
+
 	return phy_driver_register(&ar8xxx_phy_driver);
 }
 
 void __exit
 ar8xxx_exit(void)
 {
+	printk(KERN_ERR "ar8216: Module exit.\n");
 	phy_driver_unregister(&ar8xxx_phy_driver);
 }
 
