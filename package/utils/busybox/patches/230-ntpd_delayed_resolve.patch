--- a/networking/ntpd.c
+++ b/networking/ntpd.c
@@ -795,23 +796,9 @@ add_peers(const char *s)
 	peer_t *p;
 
 	p = xzalloc(sizeof(*p) + strlen(s));
 	strcpy(p->p_hostname, s);
-	resolve_peer_hostname(p, /*loop_on_fail=*/ 1);
-
-	/* Names like N.<country2chars>.pool.ntp.org are randomly resolved
-	 * to a pool of machines. Sometimes different N's resolve to the same IP.
-	 * It is not useful to have two peers with same IP. We skip duplicates.
-	 */
-	for (item = G.ntp_peers; item != NULL; item = item->link) {
-		peer_t *pp = (peer_t *) item->data;
-		if (strcmp(p->p_dotted, pp->p_dotted) == 0) {
-			bb_error_msg("duplicate peer %s (%s)", s, p->p_dotted);
-			free(p->p_lsa);
-			free(p->p_dotted);
-			free(p);
-			return;
-		}
-	}
+	p->p_lsa = NULL;
+	p->p_dotted = NULL;
 
 	p->p_fd = -1;
 	p->p_xmt_msg.m_status = MODE_CLIENT | (NTP_VERSION << 3);
@@ -861,6 +848,13 @@ send_query_to_peer(peer_t *p)
 	 *
 	 * Uncomment this and use strace to see it in action:
 	 */
+
+	/* See if the peer hostname already resolved yet, if not, retry to resolv and return on failure */
+	if (!p->p_lsa)
+	{
+		resolve_peer_hostname(p, /*loop_on_fail=*/ 1);
+	}
+
 #define PROBE_LOCAL_ADDR /* { len_and_sockaddr lsa; lsa.len = LSA_SIZEOF_SA; getsockname(p->query.fd, &lsa.u.sa, &lsa.len); } */
 
 	if (p->p_fd == -1) {
